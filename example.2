
pool star_x 65536 float
pool star_y 65536 float

S	float star_x[65536];
S	float star_y[65536];

pool rng_state 1 uint32_t

S	uint32_t rng_state[1];


fn rng_stateless
lit A 48271UL
lit B 2147483647UL
mul A a a 
mod a B a
inc a
end

S	void rng_stateless(uint64_t *a) {
S		uint64_t A;
S		A = 48271UL;
S		uint64_t B;
S		B = 2147483647UL;
S		(*a) = (*a) * A;
S		(*a) = B % (*a);
S	}

fn rng
fetch rng_state A
rng_stateless A
mov A a
store rng_state a
end

S	void rng(uint64_t *a) {
S		uint64_t A;
S		A = rng_state[0];
S		rng_stateless(&A);
S		(*a) = A;
S		rng_state[0] = (*a);
S	}

fn frng
type a float
rng A
mov A a
end


S	void frng (float *a) {
S		uint64_t A;
S		rng(&A);
S		(*a) = A;
S	}


fn create
type A float
frng A
storei star_x A a
frng A
storei star_y A a
inc a
lt a b z
c printf("CR %llu %llu %llu\n", a[0], b[0], z[0]);
end

S	void create(uint64_t *a, uint64_t *b, uint64_t *z) {
S		float A;
S		frng(&A);
S		star_x[*a] = A;	
S		frng(&A);
S		star_y[*a] = A;	
S		*a++;
S		(*z) = *a < *b;
S	}



fn populate
lit A 0
size star_x B
loop Z create A B Z
end


S	void populate(void) {
S		uint64_t A;
S		uint64_t B;
S		uint64_t Z;
S		A = 0;
S		B = star_x_size;
S		for(Z=0;Z==0;) create(&A, &B, &Z);
S	}


fn dump
lit A 0
size star_x B
loop Z dumpone A B Z
end


fn dumpone
type X float
type Y float
fetchi star_x X a
fetchi star_y Y a
c printf("%0.2f %0.2f\n", *X, *Y);
inc a
lt a b z
end


pro #include <stdio.h>
anx int main() { populate(); dump(); }

